__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RkTextInput = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/flyp/Projetos/ourboxapp/node_modules/react-native-ui-kitten/src/components/textinput/rkTextInput.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _rkComponent = require(_dependencyMap[2], "../rkComponent.js");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var RkTextInput = exports.RkTextInput = function (_RkComponent) {
    _inherits(RkTextInput, _RkComponent);

    function RkTextInput(props) {
      _classCallCheck(this, RkTextInput);

      var _this = _possibleConstructorReturn(this, (RkTextInput.__proto__ || Object.getPrototypeOf(RkTextInput)).call(this, props));

      _this.componentName = 'RkTextInput';
      _this.typeMapping = {
        container: {
          underlineWidth: 'borderBottomWidth',
          underlineColor: 'borderBottomColor'
        },
        input: {
          color: 'color',
          inputBackgroundColor: 'backgroundColor',
          placeholderTextColor: 'placeholderTextColor'
        },
        label: {
          labelColor: 'color',
          labelFontSize: 'fontSize'
        }
      };
      _this.focusInput = _this._focusInput.bind(_this);
      return _this;
    }

    _createClass(RkTextInput, [{
      key: "_focusInput",
      value: function _focusInput() {
        this.refs.input.focus();
      }
    }, {
      key: "_displayLabel",
      value: function _displayLabel(label, labelStyle) {
        var _this2 = this;

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Text,
            {
              style: labelStyle,
              onPress: this.focusInput,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 156
              }
            },
            label
          );
        } else {
          return _react2.default.cloneElement(label, {
            onPress: function onPress(e) {
              _this2.refs.input.focus();

              label.props.onPress && label.props.onPress(e);
            },
            style: [labelStyle, label.props.style]
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            label = _props.label,
            labelStyle = _props.labelStyle,
            inputStyle = _props.inputStyle,
            inputProps = _objectWithoutProperties(_props, ["style", "label", "labelStyle", "inputStyle"]);

        var _defineStyles = this.defineStyles(),
            boxStyle = _defineStyles.container,
            input = _defineStyles.input,
            labelS = _defineStyles.label;

        var placeholderColor = this.extractNonStyleValue(input, 'placeholderTextColor');
        labelStyle = [labelS, labelStyle];
        inputProps.style = [input, inputStyle];
        inputProps.placeholderTextColor = placeholderColor;
        boxStyle.push(style);
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            activeOpacity: 1,
            onPress: this.focusInput,
            style: boxStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 184
            }
          },
          label && this._displayLabel(label, labelStyle),
          _react2.default.createElement(_reactNative.TextInput, _extends({
            underlineColorAndroid: "transparent",
            ref: 'input'
          }, inputProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 186
            }
          }))
        );
      }
    }]);

    return RkTextInput;
  }(_rkComponent.RkComponent);
});