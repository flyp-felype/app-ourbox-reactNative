__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RkButton = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _class,
      _temp2,
      _jsxFileName = "/home/flyp/Projetos/ourboxapp/node_modules/react-native-ui-kitten/src/components/button/rkButton.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _lodash = require(_dependencyMap[3], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _rkText = require(_dependencyMap[4], "../text/rkText");

  var _rkComponent = require(_dependencyMap[5], "../rkComponent");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var RkButton = exports.RkButton = (_temp2 = _class = function (_RkComponent) {
    _inherits(RkButton, _RkComponent);

    function RkButton() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, RkButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RkButton.__proto__ || Object.getPrototypeOf(RkButton)).call.apply(_ref, [this].concat(args))), _this), _this.componentName = 'RkButton', _this.typeMapping = {
        container: {
          hitSlop: 'hitSlop'
        },
        content: {
          color: 'color',
          fontSize: 'fontSize'
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(RkButton, [{
      key: "_renderChildren",
      value: function _renderChildren(style) {
        var _this2 = this;

        var displayText = function displayText(text) {
          return _react2.default.createElement(
            _rkText.RkText,
            {
              style: [style, _this2.props.contentStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 144
              }
            },
            text
          );
        };

        if (typeof this.props.children === 'string') {
          return displayText(this.props.children);
        }

        var babies = _lodash2.default.isArray(this.props.children) ? this.props.children : [this.props.children];
        return _react2.default.Children.map(babies, function (baby) {
          if (typeof baby === 'string') {
            return displayText(baby);
          } else {
            var _baby$props = baby.props,
                babyStyle = _baby$props.style,
                babyProps = _objectWithoutProperties(_baby$props, ["style"]);

            return _react2.default.cloneElement(baby, _extends({
              style: [_this2.props.contentStyle, babyStyle]
            }, babyProps));
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _get$call = _get(RkButton.prototype.__proto__ || Object.getPrototypeOf(RkButton.prototype), "defineStyles", this).call(this),
            container = _get$call.container,
            content = _get$call.content;

        var _props = this.props,
            style = _props.style,
            touchableProps = _objectWithoutProperties(_props, ["style"]);

        var hitSlop = this.extractNonStyleValue(container, 'hitSlop');
        if (hitSlop) touchableProps.hitSlop = hitSlop;
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          _extends({
            style: [container, style]
          }, touchableProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 169
            }
          }),
          this.props.children && this._renderChildren(content)
        );
      }
    }]);

    return RkButton;
  }(_rkComponent.RkComponent), _class.contextTypes = {
    theme: _propTypes2.default.object
  }, _temp2);
});