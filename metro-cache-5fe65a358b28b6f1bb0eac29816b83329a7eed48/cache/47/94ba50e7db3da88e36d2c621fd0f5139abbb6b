__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RkPicker = undefined;
  var _jsxFileName = "/home/flyp/Projetos/ourboxapp/node_modules/react-native-ui-kitten/src/components/picker/rkPicker.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1], "react-native");

  var _rkButton = require(_dependencyMap[2], "../button/rkButton");

  var _rkText = require(_dependencyMap[3], "../text/rkText");

  var _rkComponent = require(_dependencyMap[4], "../rkComponent");

  var _rkOptionsList = require(_dependencyMap[5], "./rkOptionsList");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var RkPicker = exports.RkPicker = function (_RkComponent) {
    _inherits(RkPicker, _RkComponent);

    function RkPicker(props) {
      _classCallCheck(this, RkPicker);

      var _this = _possibleConstructorReturn(this, (RkPicker.__proto__ || Object.getPrototypeOf(RkPicker)).call(this, props));

      _this.componentName = 'RkPicker';
      _this.typeMapping = {
        modalContainerBlock: {},
        modalContentBlock: {
          windowBackgroundColor: 'backgroundColor',
          windowBorderRadius: 'borderRadius',
          windowBorderWidth: 'borderWidth',
          windowBorderColor: 'borderColor'
        },
        titleBlock: {},
        listsContainerBlock: {},
        buttonsBlockBlock: {},
        optionBlock: {},
        optionListContainer: {},
        cancelButtonBlock: {
          cancelBorderColor: 'borderColor'
        },
        confirmButtonBlock: {
          confirmBorderColor: 'borderColor'
        },
        highlightBlock: {
          highlightBorderTopColor: 'borderTopColor',
          highlightBorderBottomColor: 'borderBottomColor',
          highlightBorderTopWidth: 'borderTopWidth',
          highlightBorderBottomWidth: 'borderBottomWidth'
        }
      };
      _this.optionHeight = _this.props.optionHeight || 50;
      _this.optionNumberOnPicker = _this.props.optionNumberOnPicker || 3;
      _this.pickerHeight = _this.optionNumberOnPicker * _this.optionHeight;
      _this.confirmButtonText = _this.props.confirmButtonText || 'OK';
      _this.cancelButtonText = _this.props.cancelButtonText || 'CANCEL';
      _this.confirmTextRkType = _this.props.confirmTextRkType || 'header';
      _this.cancelTextRkType = _this.props.cancelTextRkType || '';
      _this.confirmButtonRkType = _this.props.confirmButtonRkType || 'transparent rectangle';
      _this.cancelButtonRkType = _this.props.cancelButtonRkType || 'transparent rectangle';
      _this.titleTextRkType = _this.props.titleTextRkType || 'header';
      _this.state = {
        scrollToSelected: false,
        selectedOptions: _this.props.selectedOptions.slice()
      };
      return _this;
    }

    _createClass(RkPicker, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.props.visible !== prevProps.visible) {
          this.setState({
            scrollToSelected: this.props.visible,
            selectedOptions: this.props.selectedOptions.slice()
          });
        }
      }
    }, {
      key: "selectOption",
      value: function selectOption(selectedOption, listIndex) {
        this.state.selectedOptions[listIndex] = selectedOption;
      }
    }, {
      key: "renderOptionList",
      value: function renderOptionList(array, index, optionBlock, highlightBlock, optionListContainer) {
        var _this2 = this;

        return _react2.default.createElement(_rkOptionsList.RkOptionsList, {
          rkType: this.props.rkType,
          key: index,
          id: index,
          data: array,
          selectedOption: this.state.selectedOptions[index],
          scrollToSelected: this.state.scrollToSelected,
          onSelect: function onSelect(selectedOption, listIndex) {
            return _this2.selectOption(selectedOption, listIndex);
          },
          optionHeight: this.optionHeight,
          optionNumberOnPicker: this.optionNumberOnPicker,
          optionRkType: this.props.optionRkType,
          selectedOptionRkType: this.props.selectedOptionRkType,
          optionBlockStyle: optionBlock,
          highlightBlockStyle: highlightBlock,
          optionListContainerStyle: optionListContainer,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 196
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _get$call = _get(RkPicker.prototype.__proto__ || Object.getPrototypeOf(RkPicker.prototype), "defineStyles", this).call(this, this.props.rkType),
            modalContainerBlock = _get$call.modalContainerBlock,
            modalContentBlock = _get$call.modalContentBlock,
            titleBlock = _get$call.titleBlock,
            buttonsBlockBlock = _get$call.buttonsBlockBlock,
            listsContainerBlock = _get$call.listsContainerBlock,
            cancelButtonBlock = _get$call.cancelButtonBlock,
            confirmButtonBlock = _get$call.confirmButtonBlock,
            optionBlock = _get$call.optionBlock,
            highlightBlock = _get$call.highlightBlock,
            optionListContainer = _get$call.optionListContainer;

        return _react2.default.createElement(
          _reactNative.Modal,
          {
            visible: this.props.visible,
            animationType: 'slide',
            transparent: true,
            onRequestClose: function onRequestClose() {
              return _this3.props.onCancel();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 222
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [modalContainerBlock],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 228
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [modalContentBlock, this.props.style],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 229
                }
              },
              _react2.default.createElement(
                _rkText.RkText,
                {
                  rkType: this.titleTextRkType,
                  style: titleBlock,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 230
                  }
                },
                this.props.title
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: [listsContainerBlock, {
                    height: this.pickerHeight
                  }],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 231
                  }
                },
                this.props.data.map(function (array, index) {
                  return _this3.renderOptionList(array, index, optionBlock, highlightBlock, optionListContainer);
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: [buttonsBlockBlock],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 234
                  }
                },
                _react2.default.createElement(
                  _rkButton.RkButton,
                  {
                    rkType: this.cancelButtonRkType,
                    style: cancelButtonBlock,
                    onPress: function onPress() {
                      return _this3.props.onCancel();
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 235
                    }
                  },
                  _react2.default.createElement(
                    _rkText.RkText,
                    {
                      rkType: this.cancelTextRkType,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 238
                      }
                    },
                    this.cancelButtonText
                  )
                ),
                _react2.default.createElement(
                  _rkButton.RkButton,
                  {
                    rkType: this.confirmButtonRkType,
                    style: confirmButtonBlock,
                    onPress: function onPress() {
                      return _this3.props.onConfirm(_this3.state.selectedOptions);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 240
                    }
                  },
                  _react2.default.createElement(
                    _rkText.RkText,
                    {
                      rkType: this.confirmTextRkType,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 243
                      }
                    },
                    this.confirmButtonText
                  )
                )
              )
            )
          )
        );
      }
    }]);

    return RkPicker;
  }(_rkComponent.RkComponent);
});